#!/usr/bin/env ruby

require 'bundler'

changelog_file = Dir['CHANGELOG*'].first
entries = ""
sha_url_format = "../../commit/%h"

helper = Bundler::GemHelper.new(Dir.pwd)
current_version = "v#{helper.gemspec.version}"
starting_version = nil
ending_version = nil, ending_version_name = nil

if ENV['VERSION']
  ver = ENV['VERSION']
  first_ver, second_ver = ver.split("..")
  starting_version = "v#{first_ver.gsub(/^[^\d]*/, '')}" if ! first_ver.nil? && first_ver.size > 0
  ending_version = "v#{second_ver.gsub(/^[^\d]*/, '')}" if ! second_ver.nil? && second_ver.size > 0
  ending_version_name = ending_version if ending_version
end

# If we already have a changelog, make the starting_version be the
# last one in the changelog
#
if ! starting_version && File.exist?(changelog_file)
  entries = File.read(changelog_file)
  head = entries.split.first
  if head =~ /(\d+\.\d+\.\d+).*/
    starting_version = "v#{$1}"
    
    if current_version == starting_version
      puts "WARN: gemspec version is the same as most recent changelog: #{current_version}"
    end
  end
end

 # Get a list of current tags
tags = `git tag -l`.split
tags = tags.sort_by {|t| t[1..-1].split(".").collect {|s| s.to_i } }
newest_tag = tags[-1]

if current_version == newest_tag
  # When generating CHANGELOG after release, we want the last tag as the ending version
  ending_version = newest_tag
  ending_version_name = newest_tag
else
  # When generating CHANGELOG before release, we want the current ver as the ending version
  ending_version = "HEAD"
  ending_version_name = current_version
end

if starting_version
  version_selector = "#{starting_version}..#{ending_version}"
else
  puts "WARN: No starting version, dumping entire history, try: rake changelog VERSION=v1.2.3"
  version_selector = ""
end

# Generate changelog from repo
puts "Generating a changelog for #{version_selector}"
log=`git log --pretty='format:%s [%h](#{sha_url_format})' #{version_selector}`.lines.to_a

# Strip out maintenance entries
log = log.delete_if do |l|
   l =~ /^Regenerated? gemspec/ ||
       l =~ /^version bump/i ||
       l =~ /^bump version/i ||
       l =~ /^updated? changelog/i ||
       l =~ /^merged? branch/i
end

# Write out changelog file
File.open(changelog_file, 'w') do |out|
  ver_title = ending_version_name.gsub(/^v/, '') + " (#{Time.now.strftime("%m/%d/%Y")})"
  out.puts ver_title
  out.puts "-" * ver_title.size
  out.puts "\n"
  log.each { |l| out.print "* #{l}" }
  out.puts "\n\n"
  out.puts entries
end
